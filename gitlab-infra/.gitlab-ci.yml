stages:
  - validate
  - plan
  - apply
  - destroy

variables:
  YC_SERVICE_ACCOUNT_KEY_FILE: /tmp/sa-key.json
  PLAN_JSON: plan.json

before_script:
    # Создание файла с ключом доступа для Terraform
  - echo ${YC_KEY} > /tmp/sa-key.json
  # Настройка зеркала для скачивания провайдеров, т. к. прямой доступ ограничен HashiCorp
  - |
    cat <<EOF > ~/.terraformrc
    provider_installation {
      network_mirror {
        url = "https://terraform-mirror.yandexcloud.net/"
        include = ["registry.terraform.io/*/*"]
      }
      direct {
        exclude = ["registry.terraform.io/*/*"]
      }
    }
    EOF
  - terraform --version
  - terraform init

validate:
  stage: validate
  script:
    - terraform validate

plan:
  stage: plan
  script:
    - terraform plan -out "planfile"
    - terraform show --json planfile | jq > $PLAN_JSON
  dependencies:
    - validate
  artifacts:
    paths:
      - planfile
    reports:
      terraform: $PLAN_JSON

apply:
  stage: apply
  script:
    - terraform apply -input=false "planfile"
  dependencies:
    - plan
  when: manual
  only:
    - main

destroy:
  stage: destroy
  script:
    - terraform destroy --auto-approve
  when: manual
  only:
    - main

after_script:
  - >
    curl -X POST -H "Content-Type: application/json" -d "{\"parse_mode\": \"markdown\",\"disable_web_page_preview\": \"True\",\"chat_id\": \"${CHAT_ID}\",\"text\": \"Pipeline: [${CI_PIPELINE_NAME}/${CI_PIPELINE_ID}](${CI_PIPELINE_URL}), Job: [${CI_JOB_NAME}](${CI_JOB_URL}) => *${CI_JOB_STATUS}*\"}" https://api.telegram.org/bot${TOKEN}/sendMessage